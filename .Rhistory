w.band = VIS_bands, annotations = c("title"))
plot(as.reflector_spct(Solidago_lower_adax.spct),
w.band = VIS_bands(),
annotations = c("color.guide", "boxes", "labels", "title"))
plot(as.filter_spct(Solidago_lower_adax.spct),
w.band = VIS_bands(),
annotations = c("color.guide", "boxes", "labels", "title"))
plot(as.filter_spct(Solidago_lower_adax.spct),
w.band = Plant_bands(),
annotations = c("color.guide", "boxes", "labels", "title"))
plot(as.reflector_spct(Solidago_lower_adax.spct),
w.band = Plant_bands(),
annotations = c("color.guide", "boxes", "labels", "title"))
.Machine$double.xmin
.Machine$double.eps
.Machine$double.xmax
install.packages(c("ggtern", "installr", "packrat", "RcppArmadillo", "rsconnect"))
install.packages("rmdformats")
install.packages("htmltools")
install.packages("rticles")
install.packages("ggpmisc")
install.packages(c("ggtern", "gplots", "mclust", "packrat", "readxl", "rgdal", "rsconnect", "shiny"))
install.packages("mclust")
devtools::install_github('rstudio/tufte')
10^-2
install.packages(c("curl", "devtools", "ggpmisc", "htmltools", "lubridate", "photobiology", "Rcpp", "sp", "testthat"))
library(ggmap)
library(maptools)
library(maps)
visited <- c("Ushuaia, Argentina", "Mauna Kea, Hawaii", "Logan, Utah", "Barro Colorado, Panama")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
install.packages("rgeos")
library(ggmap)
library(maptools)
library(maps)
visited <- c("Ushuaia, Argentina", "Mauna Kea, Hawaii", "Logan, Utah", "Barro Colorado, Panama")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
library(ggmap)
library(maptools)
library(maps)
visited <- c("Ushuaia, Argentina", "Mauna Kea, Hawaii", "Logan, Utah", "Barro Colorado, Panama")
ll.visited <- geocode(visited, "more")
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
ll.visited <- geocode(visited)
locations <- data.frame(lon = ll.visited$lon, lat = ll.visited$lat, label = visited)
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50") # create a layer of borders
mp <- ggplot() + mapWorld
#Now Layer the cities on top
mp <- mp +
geom_point(data = locations.df,
aes(x = lon, y = lat), color="green", size=3) +
geom_label(data = locations.df, aes(x = lon, y = lat, label = label), fill = "white")
mp
install.packages(c("cowplot", "lme4"))
install.packages(c("cluster", "Matrix", "nlme", "survival"), lib="C:/Program Files/R/R-3.3.0beta/library")
install.packages("testthat")
y <- c(4,5,6,4,8,9,10,11)
A <- factor(c("a1", "a1", "a1", "a1","a2", "a2", "a2","a2"))
y
A
mf <- lm(y~A+1)
anova(mf)
mf <- lm(y~A)
anova(mf)
mf1 <- lm(y~A*B)
B <- factor(c("b1","b1","b2","b2","b1","b1","b2","b2"))
mf1 <- lm(y~A*B)
anova(mf1)
plot(y~A)
plot(y~A, type="p")
plot(y~B)
plot(mf1)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
group
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D9
anova(lm.D9)
lm.D90 <- lm(weight ~ group - 1)
anova(lm.D9)
anova(lm.D90)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(reshape)
library(RCurl)
dd <- read.csv(text = getURL("https://gist.githubusercontent.com/GeekOnAcid/da022affd36310c96cd4/raw/9c2ac2b033979fcf14a8d9b2e3e390a4bcc6f0e3/us_nr_of_crimes_1960_2014.csv"))
d <- melt(dd, id="Year")
names(d) <- c("Year","Crime.Type","Crime.Rate")
d$Crime.Rate <- round(d$Crime.Rate,0)
mins <- group_by(d, Crime.Type) %>% slice(which.min(Crime.Rate))
maxs <- group_by(d, Crime.Type) %>% slice(which.max(Crime.Rate))
ends <- group_by(d, Crime.Type) %>% filter(Year == max(Year))
quarts <- d %>% group_by(Crime.Type) %>%
summarize(quart1 = quantile(Crime.Rate, 0.25),
quart2 = quantile(Crime.Rate, 0.75)) %>%
right_join(d)
pdf("sparklines_ggplot_multiple_ten.pdf", height=10, width=8)
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), fill = 'grey90') +
geom_line(size=0.3) +
stat_peaks(color = "blue", span = NULL) +
stat_valleys(color = "red", span = NULL) +
stat_peaks(geom = "text", vjust = 2.5) +
stat_valleys(geom = "text", vjust = -1) +
#  geom_point(data = mins, col = 'red') +
#  geom_point(data = maxs, col = 'blue') +
#  geom_text(data = mins, aes(label = Crime.Rate), vjust = -1) +
#  geom_text(data = maxs, aes(label = Crime.Rate), vjust = 2.5) +
geom_text(data = ends, aes(label = Crime.Rate), hjust = 0, nudge_x = 1) +
geom_text(data = ends, aes(label = Crime.Type), hjust = 0, nudge_x = 5) +
expand_limits(x = max(d$Year) + (0.25 * (max(d$Year) - min(d$Year)))) +
scale_x_continuous(breaks = seq(1960, 2010, 10)) +
scale_y_continuous(expand = c(0.1, 0)) +
theme_tufte(base_size = 15, base_family = "Helvetica") +
theme(axis.title=element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(), strip.text = element_blank())
library(ggpmisc)
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), fill = 'grey90') +
geom_line(size=0.3) +
stat_peaks(color = "blue", span = NULL) +
stat_valleys(color = "red", span = NULL) +
stat_peaks(geom = "text", vjust = 2.5) +
stat_valleys(geom = "text", vjust = -1) +
#  geom_point(data = mins, col = 'red') +
#  geom_point(data = maxs, col = 'blue') +
#  geom_text(data = mins, aes(label = Crime.Rate), vjust = -1) +
#  geom_text(data = maxs, aes(label = Crime.Rate), vjust = 2.5) +
geom_text(data = ends, aes(label = Crime.Rate), hjust = 0, nudge_x = 1) +
geom_text(data = ends, aes(label = Crime.Type), hjust = 0, nudge_x = 5) +
expand_limits(x = max(d$Year) + (0.25 * (max(d$Year) - min(d$Year)))) +
scale_x_continuous(breaks = seq(1960, 2010, 10)) +
scale_y_continuous(expand = c(0.1, 0)) +
theme_tufte(base_size = 15, base_family = "Helvetica") +
theme(axis.title=element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(), strip.text = element_blank())
dev.off()
pdf("sparklines_ggplot_multiple_ten.pdf", height=10, width=8)
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), fill = 'grey90') +
geom_line(size=0.3) +
stat_peaks(color = "blue", span = NULL) +
stat_valleys(color = "red", span = NULL) +
stat_peaks(geom = "text", vjust = 2.5, span = NULL, aes(label = .y.label.)) +
stat_valleys(geom = "text", vjust = -1, span = NULL, aes(label = .y.label.)) +
#  geom_point(data = mins, col = 'red') +
#  geom_point(data = maxs, col = 'blue') +
#  geom_text(data = mins, aes(label = Crime.Rate), vjust = -1) +
#  geom_text(data = maxs, aes(label = Crime.Rate), vjust = 2.5) +
geom_text(data = ends, aes(label = Crime.Rate), hjust = 0, nudge_x = 1) +
geom_text(data = ends, aes(label = Crime.Type), hjust = 0, nudge_x = 5) +
expand_limits(x = max(d$Year) + (0.25 * (max(d$Year) - min(d$Year)))) +
scale_x_continuous(breaks = seq(1960, 2010, 10)) +
scale_y_continuous(expand = c(0.1, 0)) +
theme_tufte(base_size = 15, base_family = "Helvetica") +
theme(axis.title=element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(), strip.text = element_blank())
dev.off()
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), fill = 'grey90') +
geom_line(size=0.3) +
stat_peaks(color = "blue", span = NULL) +
stat_valleys(color = "red", span = NULL) +
stat_peaks(geom = "text", vjust = 2.5, span = NULL, aes(label = ..y.label..)) +
stat_valleys(geom = "text", vjust = -1, span = NULL, aes(label = ..y.label..)) +
#  geom_point(data = mins, col = 'red') +
#  geom_point(data = maxs, col = 'blue') +
#  geom_text(data = mins, aes(label = Crime.Rate), vjust = -1) +
#  geom_text(data = maxs, aes(label = Crime.Rate), vjust = 2.5) +
geom_text(data = ends, aes(label = Crime.Rate), hjust = 0, nudge_x = 1) +
geom_text(data = ends, aes(label = Crime.Type), hjust = 0, nudge_x = 5) +
expand_limits(x = max(d$Year) + (0.25 * (max(d$Year) - min(d$Year)))) +
scale_x_continuous(breaks = seq(1960, 2010, 10)) +
scale_y_continuous(expand = c(0.1, 0)) +
theme_tufte(base_size = 15, base_family = "Helvetica") +
theme(axis.title=element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(), strip.text = element_blank())
dev.off()
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), fill = 'grey90') +
geom_line(size=0.3) +
stat_peaks(color = "blue", span = NULL) +
stat_valleys(color = "red", span = NULL) +
stat_peaks(geom = "text", vjust = 2.5, span = NULL, aes(label = ..y.label..)) +
stat_valleys(geom = "text", vjust = -1, span = NULL, aes(label = ..y.label..))
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), fill = 'grey90') +
geom_line(size=0.3) +
stat_peaks(color = "blue", span = NULL) +
stat_valleys(color = "red", span = NULL) +
stat_peaks(geom = "text", vjust = 2.5, span = NULL, aes(label = ..y.label..)) +
stat_valleys(geom = "text", vjust = -1, span = NULL, aes(label = ..y.label..)) +
#  geom_point(data = mins, col = 'red') +
#  geom_point(data = maxs, col = 'blue') +
#  geom_text(data = mins, aes(label = Crime.Rate), vjust = -1) +
#  geom_text(data = maxs, aes(label = Crime.Rate), vjust = 2.5) +
geom_text(data = ends, aes(label = Crime.Rate), hjust = 0, nudge_x = 1) +
geom_text(data = ends, aes(label = Crime.Type), hjust = 0, nudge_x = 5) +
expand_limits(x = max(d$Year) + (0.25 * (max(d$Year) - min(d$Year)))) +
scale_x_continuous(breaks = seq(1960, 2010, 10)) +
scale_y_continuous(expand = c(0.1, 0)) +
theme_tufte(base_size = 15, base_family = "Helvetica") +
theme(axis.title=element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(), strip.text = element_blank())
source('~/.active-rstudio-document', echo=TRUE)
install.packages("extrafont")
install.packages("extrafontdb")
install.packages("Rttf2pt1")
source('~/.active-rstudio-document', echo=TRUE)
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), fill = 'grey90') +
geom_line(size=0.3) +
stat_peaks(color = "blue", span = NULL) +
stat_valleys(color = "red", span = NULL) +
stat_peaks(geom = "text", vjust = 2.5, span = NULL, aes(label = ..y.label..)) +
stat_valleys(geom = "text", vjust = -1, span = NULL, aes(label = ..y.label..)) +
geom_text(data = ends, aes(label = Crime.Rate), hjust = 0, nudge_x = 1) +
geom_text(data = ends, aes(label = Crime.Type), hjust = 0, nudge_x = 5) +
expand_limits(x = max(d$Year) + (0.25 * (max(d$Year) - min(d$Year)))) +
scale_x_continuous(breaks = seq(1960, 2010, 10)) +
scale_y_continuous(expand = c(0.1, 0)) +
theme_tufte(base_size = 15) +
theme(axis.title=element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(), strip.text = element_blank())
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
library(ggthemes)
library(ggpmisc)
library(dplyr)
library(reshape)
library(RCurl)
library(extrafont)
dd <- read.csv(text = getURL("https://gist.githubusercontent.com/GeekOnAcid/da022affd36310c96cd4/raw/9c2ac2b033979fcf14a8d9b2e3e390a4bcc6f0e3/us_nr_of_crimes_1960_2014.csv"))
d <- melt(dd, id="Year")
names(d) <- c("Year","Crime.Type","Crime.Rate")
d$Crime.Rate <- round(d$Crime.Rate,0)
ends <- group_by(d, Crime.Type) %>% filter(Year == max(Year))
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
stat_summary(geom = "ribbon", fun.data = quantile, fun.args = list(probs = c(0.25,0.5,0.75)))
quantile(1:10)
quantile(1:10, probs = c(0.25, 0.50))
quantile(1:10, probs = c(0.25, 0.50), names = FALSE)
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
stat_summary(geom = "ribbon", fun.data = quantile,
fun.args = list(probs = c(0.25,0.5,0.75), names = FALSE))
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
stat_summary(fun.data = quantile,
fun.args = list(probs = c(0.25,0.5,0.75), names = FALSE))
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
stat_summary()
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
stat_summary(geom = "ribbon")
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
stat_summary_bin(geom = "ribbon")
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), fill = 'grey90') +
geom_line(size=0.3) +
stat_peaks(color = "blue", span = NULL) +
stat_valleys(color = "red", span = NULL) +
stat_peaks(geom = "text", vjust = 2.5, span = NULL, aes(label = ..y.label..)) +
stat_valleys(geom = "text", vjust = -1, span = NULL, aes(label = ..y.label..)) +
geom_text(data = ends, aes(label = Crime.Rate), hjust = 0, nudge_x = 1) +
geom_text(data = ends, aes(label = Crime.Type), hjust = 0, nudge_x = 5) +
expand_limits(x = max(d$Year) + (0.25 * (max(d$Year) - min(d$Year)))) +
scale_x_continuous(breaks = seq(1960, 2010, 10)) +
scale_y_continuous(expand = c(0.1, 0)) +
theme_tufte(base_size = 15) +
theme(axis.title=element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(), strip.text = element_blank())
quarts <- d %>% group_by(Crime.Type) %>%
summarize(quart1 = quantile(Crime.Rate, 0.25),
quart2 = quantile(Crime.Rate, 0.75)) %>%
right_join(d)
ggplot(d, aes(x=Year, y=Crime.Rate)) +
facet_grid(Crime.Type ~ ., scales = "free_y") +
geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), fill = 'grey90') +
geom_line(size=0.3) +
stat_peaks(color = "blue", span = NULL) +
stat_valleys(color = "red", span = NULL) +
stat_peaks(geom = "text", vjust = 2.5, span = NULL, aes(label = ..y.label..)) +
stat_valleys(geom = "text", vjust = -1, span = NULL, aes(label = ..y.label..)) +
geom_text(data = ends, aes(label = Crime.Rate), hjust = 0, nudge_x = 1) +
geom_text(data = ends, aes(label = Crime.Type), hjust = 0, nudge_x = 5) +
expand_limits(x = max(d$Year) + (0.25 * (max(d$Year) - min(d$Year)))) +
scale_x_continuous(breaks = seq(1960, 2010, 10)) +
scale_y_continuous(expand = c(0.1, 0)) +
theme_tufte(base_size = 15) +
theme(axis.title=element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(), strip.text = element_blank())
source('L:/aphalo/Documents/R bits and pieces/tufte/tufte-ggpmisc.R', echo=TRUE)
library(photobiology)
library(photobiologyWavebands)
library(photobiologyInOut)
library(photobiologyFilters)
library(ggspectra) # updated 2016-02-05
# this is needed for plots to be drawn correctly in all time zones.
Sys.setenv(TZ='UTC')
options(dplyr.print_max = 5)
options(dplyr.print_min = 5)
options(digits = 4)
)
options(width = 86)
my.sun.spct <- trim_wl(sun.spct, range = c(min(GEN_G()), NA, fill = 0))
my.sun.spct <- trim_wl(sun.spct, range = c(min(GEN_G(), NA), fill = 0))
my.sun.spct <- trim_wl(sun.spct, range = c(min(GEN_G()), NA), fill = 0)
n.sun.spct <- normalize(my.sun.spct)
n.sun.spct$filter <- "none"
n.pe.sun.spct <- normalize(my.sun.spct * polyester.spct)
n.pe.sun.spct$filter <- "polyester"
monochrom.spct <-
rbindspct(list(double = n.sun.spct + 0.000001,
single =  n.sun.spct + 0.001,
double.pe = n.pe.sun.spct + 0.000001,
single.pe = n.pe.sun.spct + 0.001),
idfactor = "monochromator")
plot(monochrom.spct, norm = "max", w.band = list(GEN_G(300), PAR())) +
facet_wrap(~monochromator, labeller = "label_both", ncol = 1)
View(monochrom.spct)
sun_mspct <- source_mspct(
list(double = n.sun.spct + 0.000001,
single =  n.sun.spct + 0.001,
double.pe = n.pe.sun.spct + 0.000001,
single.pe = n.pe.sun.spct + 0.001))
irrad(sun_mspct, list(GEN_G(), CIE(), PG()))
my.sun.spct <- trim_wl(sun.spct, range = c(min(GEN_G()), NA), fill = 0)
n.sun.spct <- normalize(my.sun.spct)
n.sun.spct$filter <- "none"
pe.sun.spct <- my.sun.spct * polyester.spct
n.pe.sun.spct <- normalize(pe.sun.spct)
n.pe.sun.spct$filter <- "polyester"
monochrom.spct <-
rbindspct(list(
none = rbindspct(list(double = n.sun.spct + 0.000001,
single =  n.sun.spct + 0.001),
idfactor = "monochromator"),
polyester = rbindspct(list(double = n.pe.sun.spct + 0.000001,
single = n.pe.sun.spct + 0.001),
idfactor = "monochromator")),
idfactor = "filter")
plot(monochrom.spct, norm = "max", w.band = list(GEN_G(300), PAR()),
annotations = c("labels", "summaries", "color.guide", "boxes")) +
stat_peaks(span = NULL, color = "red") +
facet_grid(filter~monochromator, labeller = "label_both")
sun.mspct <- source_mspct(
list(double = sun.spct + 0.000001,
single =  sun.spct + 0.001,
double.pe = pe.sun.spct + 0.000001,
single.pe = pe.sun.spct + 0.001))
sun.df <- irrad(sun.mspct, list(GEN_G(), CIE(), PG()))
View(sun.df)
library(knitr)
kable(sun.df, caption = "Summaries for the spectra in the figure.")
my.sun.spct <- trim_wl(sun.spct, range = c(min(GEN_G()), NA), fill = 0)
my.sun.spct$filter <- "none"
n.sun.spct <- normalize(my.sun.spct)
pe.sun.spct <- my.sun.spct * polyester.spct
pe.sun.spct$filter <- "polyester"
n.pe.sun.spct <- normalize(pe.sun.spct)
monochrom.spct <-
rbindspct(list(
none = rbindspct(list(double = n.sun.spct + 0.000001,
single =  n.sun.spct + 0.001),
idfactor = "monochromator"),
polyester = rbindspct(list(double = n.pe.sun.spct + 0.000001,
single = n.pe.sun.spct + 0.001),
idfactor = "monochromator")),
idfactor = "filter")
plot(monochrom.spct, norm = "max", w.band = list(GEN_G(300), PAR()),
annotations = c("labels", "summaries", "color.guide", "boxes")) +
stat_peaks(span = NULL, color = "red") +
facet_grid(filter~monochromator, labeller = "label_both")
sun.mspct <- source_mspct(
list(double = sun.spct + 0.000001,
single =  sun.spct + 0.001,
double.pe = pe.sun.spct + 0.000001,
single.pe = pe.sun.spct + 0.001))
sun.df <- irrad(sun.mspct, list(GEN_G(), CIE(), PG()))
sun.df
names(sun.df) <- c("Case", "GPAS", "CIE", "PG")
kable(sun.df, caption = "Summaries for the spectra in the figure.")
sun.df <- irrad(sun.mspct, list(GEN_G(), CIE(), PG(), UVB(), UVA(), PAR()))
names(sun.df) <- c("Case", "GPAS", "CIE", "PG", "UV-B", "UV-A", "PAR")
kable(sun.df, caption = "Summaries for the spectra in the figure.")
install.packages(c("IRanges", "rmarkdown", "rsconnect"))
library("installr", lib.loc="~/R/win-library/3.3")
setInternet2(TRUE)
installr::updateR() # updating R.
install.packages(c("BH", "rcdd", "RcppArmadillo", "rmarkdown", "rOmniDriver", "rsconnect", "zoo"))
install.packages("survival", lib="C:/Program Files/R/R-3.2.5/library")
install.packages(c("BH", "rcdd", "RcppArmadillo", "rmarkdown",
install.packages("BH")
install.packages(c("rcdd", "RcppArmadillo", "rsconnect", "zoo"))
install.packages("rmarkdown")
install.packages(c("ggspectra", "photobiology", "photobiologyAll", "photobiologyInOut", "photobiologyLamps", "photobiologyPlants", "rOmniDriver"))
install.packages(c("AnnotationDbi", "KEGGREST", "limma", "psych", "rgdal"))
library("photobiology", lib.loc="~/R/win-library/3.3")
library("photobiologySun", lib.loc="~/R/win-library/3.3")
library("photobiologyWavebands", lib.loc="~/R/win-library/3.3")
# Example from https://cran.rstudio.com/web/packages/ggpmisc/vignettes/examples.html
library(ggplot2)
library(ggpmisc)
## stat_poly_eq()
## We generate some artificial data.
set.seed(4321)
# generate artificial data
x <- 1:100
y <- (x + x^2 + x^3) + rnorm(length(x), mean = 0, sd = mean(x^3) / 4)
my.data <- data.frame(x, y, group = c("A", "B"), y2 = y * c(0.5,2))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..), vjust = c(-8, 0),
formula = formula, parse = TRUE) +
theme_bw()
# Example from https://cran.rstudio.com/web/packages/ggpmisc/vignettes/examples.html
library(ggplot2)
library(ggpmisc)
## stat_poly_eq()
## We generate some artificial data.
set.seed(4321)
# generate artificial data
x <- 1:100
y <- (x + x^2 + x^3) + rnorm(length(x), mean = 0, sd = mean(x^3) / 4)
my.data <- data.frame(x, y, group = c("A", "B"), y2 = y * c(0.5,2))
formula <- y ~ poly(x, 3, raw = TRUE)
ggplot(my.data, aes(x, y2, colour = group)) +
geom_point() +
geom_smooth(method = "lm", formula = formula) +
stat_poly_eq(aes(label = ..eq.label..),
formula = formula, parse = TRUE) +
theme_bw()
setwd("L:/aphalo/Documents/Own_talks/Biophilosophy")
install.packages(c("AnnotationDbi", "Biostrings", "limma", "openssl", "S4Vectors"))
install.packages("segmented")
install.packages("earth")
View(cone_fundamentals10.spc)
# Chunk 1: setup
library(knitr)
opts_chunk$set(fig.path='figure/pos-', fig.align='center', fig.show='hold', size="scriptsize",            fig.width=8, fig.height=4, out.width='.95\\textwidth', tidy=FALSE, dev='pdf')
# Chunk 2: packages
library(photobiology)
library(photobiologyPlants)
library(ggplot2)
library(ggspectra)
# Chunk 3: plant-vision-00
autoplot(sun.spct, annotations = "", unit.out = "photon") %+%
geom_vline(xintercept = 293, linetype = "dotted") %+%
expand_limits(x = c(270, 830))
# Chunk 4: human-vision
ggplot(cone_fundamentals10.spct) +
geom_line(aes(w.length, x), colour = "red") +
geom_line(aes(w.length, y), colour = "green") +
geom_line(aes(w.length, z), colour = "blue") +
geom_vline(xintercept = 293, linetype = "dotted") +
expand_limits(x = c(270, 830)) +
theme_bw()
# Chunk 5: plant-vision-0
ex7.data <- data.frame(w.length=seq(300, 770, length.out=100))
ex7.data$sigma.r <- Phy_Sigma_R(ex7.data$w.length)
ex7.data$sigma.fr <- Phy_Sigma_FR(ex7.data$w.length)
ex7.data$sigma <- Phy_Sigma(ex7.data$w.length)
A_as_default()
ggplot(ex7.data) +
geom_line(aes(w.length, sigma.r), colour = "red") +
geom_line(aes(w.length, sigma.fr), colour = "black") +
labs(y = expression(sigma), x = "Wavelength (nm)") +
geom_vline(xintercept = 293, linetype = "dotted") +
expand_limits(x = c(270, 830))
# Chunk 6: plant-vision-1
autoplot(CRYs.mspct[c("CRY2_dark", "CRY2_light")], annotations = "") %+%
geom_vline(xintercept = 293, linetype = "dotted") %+%
expand_limits(x = c(270, 830))
# Chunk 7: plant-vision-2
autoplot(PHOTs.mspct[c("PHOT1_light", "PHOT1_dark")], annotations = "") %+%
geom_vline(xintercept = 293, linetype = "dotted") %+%
expand_limits(x = c(270, 830))
# Chunk 8: plant-vision-3
load("UVR8Ecoli-merged-spct.Rda")
autoplot(UVR8Ecoli_merged.spct, annotations = "") %+%
geom_vline(xintercept = 293, linetype = "dotted") %+%
expand_limits(x = c(270, 830))
# Chunk 9: plant-vision-4
photon_as_default()
A_as_default()
photons_abs.spct <- e2q(sun.spct) * T2A(UVR8Ecoli_merged.spct)
autoplot(photons_abs.spct, annotations = "") %+%
geom_vline(xintercept = 293, linetype = "dotted") %+%
expand_limits(x = c(270, 830))
